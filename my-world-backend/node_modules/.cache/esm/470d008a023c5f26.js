let Koa,Router,bodyParser,mongoose,api;_023‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_023‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_023‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_023‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_023‍.w("./api",[["default",["api"],function(v){api=v}]]);require('dotenv').config();






// import createFakeData from './createFakeData';

//비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env; // process 오류남

mongoose
  .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
  .then(() => {
    console.log('Connected to MongoDB');
    // createFakeData();
  })
  .catch(e => {
    _023‍.g.console.error(e);
  });

const app = new Koa();
const router = new Router();

//라우터 설정
router.use('/api', api.routes()); //api route 적용

//라우터 설정 전 bodyParser 적용
app.use(bodyParser());

//app instance router 적용
app.use(router.routes()).use(router.allowedMethods());

// PORT가 지정되어 있지 않다면 4000 사용
const port = PORT || 4000;

app.listen(port, () => {
  _023‍.g.console.log('Listening to port %d...', port);
});
